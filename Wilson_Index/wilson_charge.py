import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.ticker as ticker
import matplotlib.pyplot as plt

def wilson_charge(chg_seq, window):
	wilson_chg = []
	len_chg_seq = len(chg_seq)

	for i in range (len_chg_seq-window):
		# group by the window size
		j = i + window
		chg_group = chg_seq[i:j+1]
		chg_avg = round(np.mean(chg_group),3)
		#print ("Window Length:", window, "Groups:", chg_group, "Charge Average:", chg_avg)
		wilson_chg.append(chg_avg)

	return(wilson_chg)


# Define the sequences and the chg_dict
AA_dict = {
	"IN": "GSHCFLDGIDKAQEEHEKYHSNWRAMASDFNLPPVVAKEIVASCDKCQLKGEAMHGQVDC",
	"L": "MEEVTIKANLIFANGSTQTAEFKGTFEKATSEAYAYADTLKKDNGEWTVDVADKGYTLNIKFAG",
	"CspTm": "GPGMRGKVKWFDSKKGYGFITKDEGGDVFVHWSAIEMEGFKTLKEGQVVEFEIQEGKKGGQAAHVKV",
	"ACTR":"GTQNRPLLRNSLDDLVGPPSNLEGQSDERALLDQLHTLLSNTDATGLEEIDRALGIPELVNQGQALEPKQD",
	"R17": 
"RLEESLEYQQFVANVEEEEAWINEKMTLVASEDYGDTLAAIQGLLKKHEAFETDFTVHKDRVNDVAANGEDLIKKNNHHVENITAKMKGLKGKVSDLEKA",
	"ProTaN": 
"GPSDAAVDTSSEITTKDLKEKKEVVEEAENGRDAPANGNAENEENGEQEADNEVDEECEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKRAAEDDEDDDVDTKKQKTDEDD",
	"R15": 
"KLKEANKQQNFNTGIKDFDFWLSEVEALLASEDYGKDLASVNNLLKKHQLLEADISAHEDRLKDLNSQADSLMTSSAFDTSQVKDKRETINGRFQRIKSMAAARRAKLNESHRL",
	"hNHE1cdt": 
"MVPAHKLDSPTMSRARIGSDPLAYEPKEDLPVITIDPASPQSPESVDLVNEELKGKVLGLSRDPAKVAEEDEDDDGGIMMRSKETSSPGTDDVFTPAPSDSPSSQRIQRCLSDPGPHPEPGEGEPFFPKGQ",
	"hCyp": 
"SSFHRIIPGFMSQGGDFTRHNGTGGKSIYGEKFEDENFILKHTGPGILSMANAGPNTNGSQFFISTAKTEFLDGKHVVFGKVKEGMNIVEAMERFGSRNGKTSKKITIADSGQLE",
	"ProTaC": "MAHHHHHHSAALEVLFQGPMSDAAVDTSSEITTKDLKEKKEVVEEAENGRDAPANGNANEENGEQEADNEVDEECEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKRAAEDDEDDDVDTKKQKTDEDD",
	"sNase": "ATSTKKLHKEPATLIKAIDGDTVKLMYKGQPMTFRLLLVDTPETKHPKKGVEKYGPEASAFTKKMVENAKKIEVEFDKGQRTDKYGRGLAYIYADGKMVNEALVRQGLAKVAYVYKPNNTHEQHLRKSEAQAKKEK",
	"synuclein": "MDVFMKGLSKAKEGVVAAAEKTKQGVAEAAGKTKEGVLYVGSKTKEGVVHGVATVAEKTKEQVTNVGGAVVTGVTAVAQKTVEGAGSIAAATGFVKKDQLGKNEEGAPQEGILEDMPVDPDNEAYEMPSEEGYQDYEPEA",
    "SIC1": "MTPSTPPRSRGTRYLAQPSGNTSSSALMQGQKTPQKPSQNLVPVTPSTTKSFKNAPLLAPPNSNMGMTSPFNGLTSPQRSPFPKSSVKRTLFQFESHDNGTVREEQEPLGRVNRILFPTQQNVDIDAAEEEEEGEVLLPPSRPTSARQLHLSLERDEFDQTHRKKIIKDVPGTPSDKVITFELAKNWNNNSPKNDARSQESEDEEDIIINPVRVGKNPFASDELVTQEIRNERKRAMLRENPDIEDVITYVNKKGEVVEKRRLTDEEKRRFKPKALFQSRDQEH",
    "HST5":"DSHAKRHHGYKRKFHEKHHSHRGY",
    "CoINT":"MGSNGADNAHNNAFGGGKNPGIGNTSGAGSNGSASSNRGNSNGWSWSNKPHKNDGFHSDGSYHITFHGDNNSKPKPGGNSGNRGNNGDGASSHHHHHH",
    "p15PAF": "MVRTKADSVPGTYRKVVAARAPRKVLGSSTSATNSTSVSSRKAENKYAGGNPVCVRPTPKWQKGIGEFFRLSPKDSEKENQIPEEAGSSGLGKAKRKACPLQPDHTNDEKE",
    "FhuA": "VVATAVSGMSVYAQAAVEPKEDTITVTAAPAPQESAWGPAATIAARQSATGTKTDTPIQKVPQSISVVTAEEMALHQPKSVKEALSYTPGVSVGTRGASNTYDHLIIRGFAAEGQSQNNYLNGLKLQGNFYNDAVIDPYMLER",
    "OPN": "HQDHVDSQSQEHLQQTQNDLASLQQTHYSSEENADVPEQPDFPDVPSKSQETVDDDDDDDNDSNDTDESDEVFTDFPTEAPVAPFNRGDNAGRGDSVAYGFRAKAHVVKASKIRKAARKLIEDDATTEDGDSQPAGLWWPKESREQNSRELPQHQSVENDSRPKFDSREVDGGDSKASAGVDSRESQGSVPAVDASNQTLESAEDAEDRHSIENNEVTR",
    "p53": "MEEPQSDPSVEPPLSQETFSDLWKLLPENNVLSPLPSQAMDDLMLSPDDIEQWFTEDPGPDEAPRMPEAAPPVAPAPAAPTPAAPAPAPSWPL",
    "SH4UD": "MGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQTPSKPASADGHRGPSAAFAPAAAEPKLFGGFNSSDTVTSPQRAGPLAGG",
    "An16": "MHHHHHHPGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYV",
    "ERMTADn": "MDGFYDQQVPFMVPGKSRSEECRGRPVIDRKRKFLDTDLAHDSEELFQDLSQLQEAWLAEAQVPDDEQFVPDFQSDNLVLHAPPPTKIKRELHSPSSELSSCSHEQALGANYGEKCLYNYCA",
    "Nucleoporin153": "GCPSASPAFGANQTPTFGQSQGASQPNPPGFGSISSSTALFPTGSQPAPPTFGTVSSSSQPPVFGQQPSQSAFGSGTTPNA",
    "K19": "MQTAPVPMPDLKNVKSKIGSTENLKHQPGGGKVQIVYKPVDLSKVTSKCGSLGNIHHKPGGGQVEVKSEKLDFKDRVQSKIGSLDNITHVPGGGNKKIE",
    "K18": "MQTAPVPMPDLKNVKSKIGSTENLKHQPGGGKVQIINKKLDLSNVQSKCGSKDNIKHVPGGGSVQIVYKPVDLSKVTSKCGSLGNIHHKPGGGQVEVKSEKLDFKDRVQSKIGSLDNITHVPGGGNKKIE",
    "K17": "MSSPGSPGTPGSRSRTPSLPTPPTREPKKVAVVRTPPKSPSSAKSRLQTAPVPMPDLKNVKSKIGSTENLKHQPGGGKVQIVYKPVDLSKVTSKCGSLGNIHHKPGGGQVEVKSEKLDFKDRVQSKIGSLDNITHVPGGGNKKIE",
    "K10": "MQTAPVPMPDLKNVKSKIGSTENLKHQPGGGKVQIVYKPVDLSKVTSKCGSLGNIHHKPGGGQVEVKSEKLDFKDRVQSKIGSLDNITHVPGGGNKKIETHKLTFRENAKAKTDHGAEIVYKSPVVSGDTSPRHLSNVSSTGSIDMVDSPQLATLADEVSASLAKQGL",
    "K27": "MSSPGSPGTPGSRSRTPSLPTPPTREPKKVAVVRTPPKSPSSAKSRLQTAPVPMPDLKNVKSKIGSTENLKHQPGGGKVQIVYKPVDLSKVTSKCGSLGNIHHKPGGGQVEVKSEKLDFKDRVQSKIGSLDNITHVPGGGNKKIETHKLTFRENAKAKTDHGAEIVY",
    "K16": "MSSPGSPGTPGSRSRTPSLPTPPTREPKKVAVVRTPPKSPSSAKSRLQTAPVPMPDLKNVKSKIGSTENLKHQPGGGKVQIINKKLDLSNVQSKCGSKDNIKHVPGGGSVQIVYKPVDLSKVTSKCGSLGNIHHKPGGGQVEVKSEKLDFKDRVQSKIGSLDNITHVPGGGNKKIE",
    "K25": "MAEPRQEFEVMEDHAGTYGLGDRKDQGGYTMHQDQEGDTDAGLKAEEAGIGDTPSLEDEAAGHVTQARMVSKSKDGTGSDDKKAKGADGKTKIATPRGAAPPGQKGQANATRIPAKTPPAPKTPPSSGEPPKSGDRSGYSSPGSPGTPGSRSRTPSLPTPPTREPKKVAVVRTPPKSPSSAKSRL",
    "K32": "MSSPGSPGTPGSRSRTPSLPTPPTREPKKVAVVRTPPKSPSSAKSRLQTAPVPMPDLKNVKSKIGSTENLKHQPGGGKVQIINKKLDLSNVQSKCGSKDNIKHVPGGGSVQIVYKPVDLSKVTSKCGSLGNIHHKPGGGQVEVKSEKLDFKDRVQSKIGSLDNITHVPGGGNKKIETHKLTFRENAKAKTDHGAEIVY",
    "K23": "MAEPRQEFEVMEDHAGTYGLGDRKDQGGYTMHQDQEGDTDAGLKAEEAGIGDTPSLEDEAAGHVTQARMVSKSKDGTGSDDKKAKGADGKTKIATPRGAAPPGQKGQANATRIPAKTPPAPKTPPSSGEPPKSGDRSGYSSPGSPGTPGSRSRTPSLPTPPTREPKKVAVVRTPPKSPSSAKSRLTHKLTFRENAKAKTDHGAEIVYKSPVVSGDTSPRHLSNVSSTGSIDMVDSPQLATLADEVSASLAKQGL",
    "K44": "MAEPRQEFEVMEDHAGTYGLGDRKDQGGYTMHQDQEGDTDAGLKAEEAGIGDTPSLEDEAAGHVTQARMVSKSKDGTGSDDKKAKGADGKTKIATPRGAAPPGQKGQANATRIPAKTPPAPKTPPSSGEPPKSGDRSGYSSPGSPGTPGSRSRTPSLPTPPTREPKKVAVVRTPPKSPSSAKSRLQTAPVPMPDLKNVKSKIGSTENLKHQPGGGKVQIVYKPVDLSKVTSKCGSLGNIHHKPGGGQVEVKSEKLDFKDRVQSKIGSLDNITHVPGGGNKKIE"
}

AA_dict = {
	"K32": "MSSPGSPGTPGSRSRTPSLPTPPTREPKKVAVVRTPPKSPSSAKSRLQTAPVPMPDLKNVKSKIGSTENLKHQPGGGKVQIINKKLDLSNVQSKCGSKDNIKHVPGGGSVQIVYKPVDLSKVTSKCGSLGNIHHKPGGGQVEVKSEKLDFKDRVQSKIGSLDNITHVPGGGNKKIETHKLTFRENAKAKTDHGAEIVY",
	"sNase": "ATSTKKLHKEPATLIKAIDGDTVKLMYKGQPMTFRLLLVDTPETKHPKKGVEKYGPEASAFTKKMVENAKKIEVEFDKGQRTDKYGRGLAYIYADGKMVNEALVRQGLAKVAYVYKPNNTHEQHLRKSEAQAKKEK",
	"CoINT":"MGSNGADNAHNNAFGGGKNPGIGNTSGAGSNGSASSNRGNSNGWSWSNKPHKNDGFHSDGSYHITFHGDNNSKPKPGGNSGNRGNNGDGASSHHHHHH",
	"SH4UD": "MGSNKSKPKDASQRRRSLEPAENVHGAGGGAFPASQTPSKPASADGHRGPSAAFAPAAAEPKLFGGFNSSDTVTSPQRAGPLAGG",
    "An16": "MHHHHHHPGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYGAPAQTPSSQYV",
	"R15": "KLKEANKQQNFNTGIKDFDFWLSEVEALLASEDYGKDLASVNNLLKKHQLLEADISAHEDRLKDLNSQADSLMTSSAFDTSQVKDKRETINGRFQRIKSMAAARRAKLNESHRL",
	"CspTm": "GPGMRGKVKWFDSKKGYGFITKDEGGDVFVHWSAIEMEGFKTLKEGQVVEFEIQEGKKGGQAAHVKV",
    "FhuA": "VVATAVSGMSVYAQAAVEPKEDTITVTAAPAPQESAWGPAATIAARQSATGTKTDTPIQKVPQSISVVTAEEMALHQPKSVKEALSYTPGVSVGTRGASNTYDHLIIRGFAAEGQSQNNYLNGLKLQGNFYNDAVIDPYMLER",
	"ACTR":"GTQNRPLLRNSLDDLVGPPSNLEGQSDERALLDQLHTLLSNTDATGLEEIDRALGIPELVNQGQALEPKQD",
	"synuclein": "MDVFMKGLSKAKEGVVAAAEKTKQGVAEAAGKTKEGVLYVGSKTKEGVVHGVATVAEKTKEQVTNVGGAVVTGVTAVAQKTVEGAGSIAAATGFVKKDQLGKNEEGAPQEGILEDMPVDPDNEAYEMPSEEGYQDYEPEA",
    "OPN": "HQDHVDSQSQEHLQQTQNDLASLQQTHYSSEENADVPEQPDFPDVPSKSQETVDDDDDDDNDSNDTDESDEVFTDFPTEAPVAPFNRGDNAGRGDSVAYGFRAKAHVVKASKIRKAARKLIEDDATTEDGDSQPAGLWWPKESREQNSRELPQHQSVENDSRPKFDSREVDGGDSKASAGVDSRESQGSVPAVDASNQTLESAEDAEDRHSIENNEVTR",
	"ProTa-N": "GPSDAAVDTSSEITTKDLKEKKEVVEEAENGRDAPANGNAENEENGEQEADNEVDEECEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKRAAEDDEDDDVDTKKQKTDEDD"
}

chg_dict = {"R": 1, "D": -1, "E": -1, "H": 0.5, "K": 1}

# Convert AA_dict to chg_list
chg_list = []
for seq in AA_dict.values():
	chg_list.append([chg_dict.get(aa, 0) for aa in seq])


#chg_seq = [-1,0,1,0,1,0.5,1]

# print AA_dict with index
for i, (key, value) in enumerate(AA_dict.items()):
	print (i, key, len(value))

# create a 6 row 2 column subplot
fig, axs = plt.subplots(6, 2, figsize=(8, 10), sharex=True)
fig.subplots_adjust(wspace=0.02, hspace=0.02)

#Protein_Number = int(input("Enter Protein Number: "))
for Protein_Number in range(0, len(AA_dict)):

	Protein_Name = list(AA_dict.keys())[Protein_Number]
	Total_charge = sum(chg_list[Protein_Number])
	Protein_Length = len(chg_list[Protein_Number])
	print ("Protein Name", Protein_Name)

	chg_seq = chg_list[Protein_Number]

	# Total positive charge in the sequence including +1 and 0.5
	Q_positive = sum([x for x in chg_seq if x > 0])
	# Total negative charge in the sequence including -1
	Q_negative = sum([x for x in chg_seq if x < 0])


	window_list = []
	wilson_chg_list = []
	for window in range (1, len(chg_seq)):
		chg_seq_step_list = []
		chg_seq_step = chg_seq
		while len(chg_seq_step) > 1:
			chg_seq_step = wilson_charge(chg_seq_step, window)
			chg_seq_step_list.append(chg_seq_step)

		window_list.append(window+1)

		if (window != len(chg_seq) and len(chg_seq_step) == 0 ):
			#print(np.mean(chg_seq_step_list[-2]))
			wilson_chg_list.append(np.mean(chg_seq_step_list[-2]))
		else:		
			wilson_chg_list.append(chg_seq_step[0])

	# add the results to a dataframe
	df = pd.DataFrame({'window': window_list,'wilson_chg': wilson_chg_list})
	area = round(df['wilson_chg'].sum(),2)
	#print (df)
	print ("Area under the Wilson curve:", area)

	#df['Norm_Window'] = df['window']/Protein_Length
	# normalize df['window'] between 0 to 1
	df['Norm_Window'] = (df['window']-df['window'].min())/(df['window'].max()-df['window'].min())

	# ======================================================================================================== #
	# plot the results

	# sns barplot
	#sns.barplot(x=df['Norm_Window'], y=df['wilson_chg'],  ax=axs[Protein_Number//2, Protein_Number%2], 
	    # palette=['magenta' if x > 0 else 'green' for x in df['wilson_chg']], alpha=0.5)
	
	# do the same with a line plot the color fill will be the area with y = 0
	axs[Protein_Number//2, Protein_Number%2].fill_between(df['Norm_Window'], df['wilson_chg'], 0,
		where=df['wilson_chg'] > 0, interpolate=True, color='magenta', alpha=0.5)
	axs[Protein_Number//2, Protein_Number%2].fill_between(df['Norm_Window'], df['wilson_chg'], 0,
		where=df['wilson_chg'] < 0, interpolate=True, color='green', alpha=0.5)
	
	axs[Protein_Number//2, Protein_Number%2].plot(df['Norm_Window'], df['wilson_chg'], color='black', alpha=0.5)

	# add a horizontal line at y = 0
	axs[Protein_Number//2, Protein_Number%2].axhline(y=0, color='black', linestyle='--', linewidth=1)

	# tick parameters
	axs[Protein_Number//2, Protein_Number%2].tick_params(axis='x', which='major', labelsize=13)
	axs[Protein_Number//2, Protein_Number%2].tick_params(axis='y', which='major', labelsize=11)

	# set the x-axis limit
	axs[Protein_Number//2, Protein_Number%2].set_xlim([0,1])

	# write (a) to (l) for the subplots in the right top
	axs[Protein_Number//2, Protein_Number%2].text(0.98, 0.95, "("+chr(97+Protein_Number)+")", transform=axs[Protein_Number//2, Protein_Number%2].transAxes,
		fontsize=18, va='top', ha='right')
	
	# write the protein name at the bottom right
	axs[Protein_Number//2, Protein_Number%2].text(0.95, 0.05, Protein_Name, transform=axs[Protein_Number//2, Protein_Number%2].transAxes,
		fontsize=18, va='bottom', ha='right')

	# write the total charge at the top left if positive in red and if negative in blue
	if Total_charge > 0:
		axs[Protein_Number//2, Protein_Number%2].text(0.02, 0.95, "Q: "+str(Total_charge), transform=axs[Protein_Number//2, Protein_Number%2].transAxes,
			fontsize=18, va='top', ha='left', color='red')
	else:
		axs[Protein_Number//2, Protein_Number%2].text(0.05, 0.95, "Q: "+str(Total_charge), transform=axs[Protein_Number//2, Protein_Number%2].transAxes,
			fontsize=18, va='top', ha='left', color='blue')
		
	# write Protein Length, Total_Charge/Protein_Length, and Area under the Wilson curve in three lines at the middle of the subplot
	axs[Protein_Number//2, Protein_Number%2].text(0.58, 0.6, "N: "+str(Protein_Length)+"\nQ/N: "+str(round(Total_charge/Protein_Length,2))+"\n"+r"$\mathcal{W}$: "+str(area), transform=axs[Protein_Number//2, Protein_Number%2].transAxes,
		fontsize=18, va='center', ha='center')
	
	# write Q_positive and Q_negative at the bottom left
	axs[Protein_Number//2, Protein_Number%2].text(0.02, 0.05, "Q+: "+str(Q_positive)+"\nQ-: "+str(Q_negative), transform=axs[Protein_Number//2, Protein_Number%2].transAxes,
		fontsize=18, va='bottom', ha='left')
	
# add x label and y label at the bottom and left of the subplot
fig.text(0.5, 0.00, 'Normalized Window Length (n/N)', ha='center', va='center', fontsize=18)
fig.text(-0.005, 0.5, r'Wilson Charge $\mathcal{W}$', ha='center', va='center', rotation='vertical', fontsize=18)


plt.tight_layout()
plt.savefig("wilson_charge.svg")

plt.show()


















